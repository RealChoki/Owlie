<!-- filepath: /Users/dav49261/Documents/CodingMentorGPT/frontend/src/views/QuizProf.vue -->
<template>
  <div class="sidebar py-3 px-3 vh-100">
    <div class="search-container">
      <input
        ref="searchInput"
        type="text"
        v-model="searchQuery"
        class="sidebar-search-bar w-100"
        placeholder="Search files..."
        @focus="isSearchFocused = true"
        @blur="isSearchFocused = false"
        :class="{ 'input-focused': isSearchFocused }"
      />
      <font-awesome-icon
        :icon="['fas', 'magnifying-glass']"
        class="magnifying-glass"
        :class="{ 'text-white': isSearchFocused }"
        style="cursor: pointer"
        @click="focusInput"
      />
    </div>

    <!-- Scrollable Course List -->
    <div class="course-list-container">
      <ul class="p-0 mt-1">
        <li
          v-for="(course, index) in filteredFiles"
          :key="index"
          :class="[
            'list-item-hover',
            'rounded',
            'text-white',
            'py-1',
            'cursor-pointer',
            'selected-course'
          ]"
        >
          <p class="m-0 py-2 px-2 d-flex align-items-start position-relative">
            <span class="course-name position-relative">
              {{ course }}
            </span>
          </p>
        </li>
      </ul>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from "vue";
import { FontAwesomeIcon } from "@fortawesome/vue-fontawesome";
import { library } from "@fortawesome/fontawesome-svg-core";
import {
  faMagnifyingGlass,
  faCircleInfo,
} from "@fortawesome/free-solid-svg-icons";

library.add(faMagnifyingGlass, faCircleInfo);

const searchQuery = ref("");
const isSearchFocused = ref(false);
const searchInput = ref<HTMLInputElement | null>(null);

const courseClicked = ref<{ course: string; mode: string } | null>(null);
const showInfo = ref(false);

const files = ["file1", "file2", "file3", "file4", "file5", "file6", "file7", "file8", "file9", "file10"];

const filteredFiles = computed(() => {
  const query = searchQuery.value.toLowerCase();
  return files.filter((course) =>
    course.toLowerCase().includes(query)
  );
});

function focusInput() {
  searchInput.value?.focus();
}
</script>

<style scoped>
.sidebar {
  background-color: var(--color-gray-dark);
}

.search-container {
  display: flex;
  align-items: center;
}

.sidebar-search-bar {
  padding: 0.5rem;
  border: 1px solid var(--color-gray-light);
  border-radius: 4px;
}

.input-focused {
  border-color: var(--color-primary);
}

.magnifying-glass {
  margin-left: 0.5rem;
}

.course-list-container {
  overflow-y: auto;
  max-height: calc(100vh - 100px); /* Adjust based on your layout */
}

.list-item-hover:hover {
  background-color: var(--color-gray-medium);
}

.selected-course {
  background-color: var(--color-gray-light);
}
</style>